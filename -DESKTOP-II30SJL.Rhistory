tidyr::pivot_longer(cols = c("begin", "end")) %>% # PIVOT TO LONGER - BEGIN AND END VALUES
subset(chr == .keys$chr) %>%             # This should be done on the fly, merging probably
subset(locus_tag != .keys$locus_tag) %>% # This should be done on the fly, merging probably
subset(dplyr::case_when(                        # This should be done on the fly, merging probably
# .each_locus$strand ==  1 ~ value < max(.each_locus$begin, .each_locus$end, na.rm = TRUE),
# .each_locus$strand == -1 ~ value > min(.each_locus$begin, .each_locus$end, na.rm = TRUE),
.each_locus$strand ==  1 ~ value < .each_locus$begin,
.each_locus$strand == -1 ~ value > .each_locus$end,
TRUE               ~ NA
))
.each_output <- if(nrow(.results) != 0) {
.results <- .results %>%
subset(dplyr::case_when(
.each_locus$strand ==  1 ~ value == max(value, na.rm = TRUE),
.each_locus$strand == -1 ~ value == min(value, na.rm = TRUE)
)) %>%
mutate(dist = dplyr::case_when(
.each_locus$strand ==  1 ~ .each_locus$begin - value,
.each_locus$strand == -1 ~ value - .each_locus$end
)) %>%
dplyr::select(locus_tag, dist)
data.frame(
closest_locus = .results$locus_tag,
dist          = .results$dist
)
} else {
data.frame(
closest_locus = NA_character_,
dist          = NA
)
}
.pb$tick()
.each_output
})
rm(.pb)
.output
}
minyao_promoters <- annotations %>%
dplyr::slice(1:10) %>%
get_promoter_distances()
get_promoter_distances <- function(.annotations, .pb = NULL, .locus_var = "locus_tag", .chr_var = "chr") {
# Initiate (or not) the progress bar - can also receive external object
if(is.null(.pb)) {
.pb <- progress::progress_bar$new(
total = .annotations %>%
dplyr::select(all_of(c(.locus_var, .chr_var))) %>%
unique() %>%
nrow()
)
}
# THIS MUST BE PARALLELIZED
.output <- .annotations %>%
#group_by(locus_tag, chr) %>% # This should probably be set on the fly
dplyr::group_by(across(all_of(c(.locus_var, .chr_var)))) %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
dplyr::group_modify(.f = function(.each_locus, .keys) {
.results <- .annotations %>%
tidyr::pivot_longer(cols = c("begin", "end")) %>% # PIVOT TO LONGER - BEGIN AND END VALUES
subset(chr == .keys$chr) %>%             # This should be done on the fly, merging probably
subset(locus_tag != .keys$locus_tag) %>% # This should be done on the fly, merging probably
subset(dplyr::case_when(                        # This should be done on the fly, merging probably
# .each_locus$strand ==  1 ~ value < max(.each_locus$begin, .each_locus$end, na.rm = TRUE),
# .each_locus$strand == -1 ~ value > min(.each_locus$begin, .each_locus$end, na.rm = TRUE),
.each_locus$strand ==  1 ~ value < .each_locus$begin,
.each_locus$strand == -1 ~ value > .each_locus$end,
TRUE               ~ NA
))
.each_output <- if(nrow(.results) != 0) {
.results <- .results %>%
subset(dplyr::case_when(
.each_locus$strand ==  1 ~ value == max(value, na.rm = TRUE),
.each_locus$strand == -1 ~ value == min(value, na.rm = TRUE)
)) %>%
dplyr::mutate(dist = dplyr::case_when(
.each_locus$strand ==  1 ~ .each_locus$begin - value,
.each_locus$strand == -1 ~ value - .each_locus$end
)) %>%
dplyr::select(locus_tag, dist)
data.frame(
closest_locus = .results$locus_tag,
dist          = .results$dist
)
} else {
data.frame(
closest_locus = NA_character_,
dist          = NA
)
}
.pb$tick()
.each_output
})
rm(.pb)
.output
}
minyao_promoters <- annotations %>%
dplyr::slice(1:10) %>%
get_promoter_distances()
View(my_promoters)
my_promoters
annotations %>%
dplyr::slice(1:10) %>%
get_promoter_distances()
annotations %>%
# dplyr::slice(1:10) %>%
get_promoter_distances()
annotations %>%
dplyr::slice(1:10)
annotations %>%
dplyr::slice(1:10) %>%
get_promoter_distances()
get_promoter_distances <- function(.annotations, .pb = NULL, .locus_var = "locus_tag", .chr_var = "chr") {
# Initiate (or not) the progress bar - can also receive external object
if(is.null(.pb)) {
.pb <- progress::progress_bar$new(
total = .annotations %>%
dplyr::select(all_of(c(.locus_var, .chr_var))) %>%
unique() %>%
nrow()
)
}
# THIS MUST BE PARALLELIZED
.distances <- .annotations %>%
#group_by(locus_tag, chr) %>% # This should probably be set on the fly
dplyr::group_by(across(all_of(c(.locus_var, .chr_var)))) %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
dplyr::group_modify(.f = function(.each_locus, .keys) {
.results <- .annotations %>%
tidyr::pivot_longer(cols = c("begin", "end")) %>% # PIVOT TO LONGER - BEGIN AND END VALUES
subset(chr == .keys$chr) %>%             # This should be done on the fly, merging probably
subset(locus_tag != .keys$locus_tag) %>% # This should be done on the fly, merging probably
subset(dplyr::case_when(                        # This should be done on the fly, merging probably
# .each_locus$strand ==  1 ~ value < max(.each_locus$begin, .each_locus$end, na.rm = TRUE),
# .each_locus$strand == -1 ~ value > min(.each_locus$begin, .each_locus$end, na.rm = TRUE),
.each_locus$strand ==  1 ~ value < .each_locus$begin,
.each_locus$strand == -1 ~ value > .each_locus$end,
TRUE               ~ NA
))
.each_output <- if(nrow(.results) != 0) {
.results <- .results %>%
subset(dplyr::case_when(
.each_locus$strand ==  1 ~ value == max(value, na.rm = TRUE),
.each_locus$strand == -1 ~ value == min(value, na.rm = TRUE)
)) %>%
dplyr::mutate(dist = dplyr::case_when(
.each_locus$strand ==  1 ~ .each_locus$begin - value,
.each_locus$strand == -1 ~ value - .each_locus$end
)) %>%
dplyr::select(locus_tag, dist)
data.frame(
closest_locus = .results$locus_tag,
dist          = .results$dist
)
} else {
data.frame(
closest_locus = NA_character_,
dist          = NA
)
}
.pb$tick()
.each_output
})
rm(.pb)
.distances
}
minyao_promoters <- annotations %>%
dplyr::slice(1:10) %>%
get_promoter_distances()
minyao_promoters
trim_distances <- function(.distances, .min_size = 100, .max_size = 2000) {
.distances %>%
dplyr::ungroup() %>%
(function(.data) {
.data %>%
subset(dist >= .min_size) %>%
dplyr::mutate(promoter_size = dplyr::case_when(
dist > .max_size ~ .max_size,
TRUE ~ dist
))
})
}
minyao_promoters2 <- minyao_promoters %>%
trim_distances(.min_size = 100, .max_size = 2000)
trim_distances <- function(.distances, .min_size = 100, .max_size = 2000) {
.distances %>%
dplyr::ungroup() %>%
(function(.data) {
.data %>%
subset(dist >= .min_size) %>%
dplyr::mutate(promoter_size = dplyr::case_when(
dist > .max_size ~ .max_size,
TRUE ~ dist
))
})
}
minyao_promoters2 <- minyao_promoters %>%
trim_distances(.min_size = 100, .max_size = 2000)
minyao_promoters2
get_promoters <- function(.distances, .txdb = NULL, .locus_var = "locus_tag", .chr_var = "chr", .dist_var = "promoter_size") {
# This is not working as expected, need to check whether the txdb exists/was assigned; tryCatch() maybe
# if(!quote(.txdb) %>% as.character() %>% exists()) stop(".txdb is not set")
if(is.null(.txdb)) stop(".txdb is NULL")
.sequences <- .distances %>%
# dplyr::slice(1:100) %>% # Taking too long to do the whole table
dplyr::group_by(across(all_of(.chr_var))) %>%
dplyr::group_map(.f = function(
.data, .keys,
#.min_size = 100, .max_size = 2000, # not being used yet, might never be
.debug = TRUE
) {
.each_chr <- .keys %>% dplyr::pull(.chr_var) %>% unique()
# Talk to me!
print(.each_chr)
# Trim promoter sizes
#... to-do
# Open FASTA file for each chromossome prior to extracting promoters in each
.fasta_file <- paste0(
# "E:/OneDrive - University of Cambridge/CSC/",
"C:/Users/ta507/OneDrive - University of Cambridge/CSC/",
"rcs-gedo2-team_coldstorage/LAB_Share/RNAseq/barley/genome_GP/",
paste0("Hordeum_vulgare.refseq[", .each_chr, "].fasta")
) %>%
Rsamtools::FaFile() %>%
open()
# Set progress bar
.pb <- progress::progress_bar$new(
total = .data %>%
dplyr::select(all_of(.locus_var)) %>%
unique() %>%
nrow()
)
# Initiate progress bar
# Get promoters for each loci
.promoters <- .data %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
#dplyr::group_by("locus_tag") %>% # 'locus_tag' must be assign on the fly
dplyr::group_by(across(all_of(.locus_var))) %>%
dplyr::group_map(.f = function(.each_data, .each_keys) {
# 'locus_tag' and 'promoter_size' must be assign on the fly
# .each_loci       <- .each_keys %>% dplyr::pull(locus_tag) %>% unique()
# .each_upstream   <- .each_data %>% dplyr::pull(promoter_size) %>% unique()
.each_loci       <- .each_keys %>% dplyr::pull(.locus_var) %>% unique()
.each_upstream   <- .each_data %>% dplyr::pull(.dist_var) %>% unique()
.each_downstream <- 0 # implement properly lazy ass! Either function argument or data column
.each_promoters <- .txdb %>%
GenomicFeatures::transcripts(filter = list("tx_name" = .each_loci)) %>%
GenomicFeatures::getPromoterSeq(
subject    = .fasta_file,
upstream   = .each_upstream,
downstream = .each_downstream
) %>%
set_names(.each_loci)
.pb$tick()
.each_promoters
})
# Close FASTA file
close(.fasta_file)
# End progress bar
# .pb$tick()
# rm(.pb)
.promoters %>%
do.call(what = c, arg = .)
}) %>%
do.call(what = c, arg = .)
.sequences
}
my_promoters <- minyao_promoters2 %>%
get_promoters(.txdb = txdb)
my_promoters
get_promoters <- function(.distances, .txdb = NULL, .locus_var = "locus_tag", .chr_var = "chr", .dist_var = "promoter_size") {
# This is not working as expected, need to check whether the txdb exists/was assigned; tryCatch() maybe
# if(!quote(.txdb) %>% as.character() %>% exists()) stop(".txdb is not set")
if(is.null(.txdb)) stop(".txdb is NULL")
.sequences <- .distances %>%
# dplyr::slice(1:100) %>% # Taking too long to do the whole table
dplyr::group_by(across(all_of(.chr_var))) %>%
dplyr::group_map(.f = function(
.data, .keys,
#.min_size = 100, .max_size = 2000, # not being used yet, might never be
.debug = TRUE
) {
.each_chr <- .keys %>% dplyr::pull(.chr_var) %>% unique()
# Talk to me!
print(.each_chr)
# Trim promoter sizes
#... to-do
# Open FASTA file for each chromossome prior to extracting promoters in each
.fasta_file <- paste0(
# "E:/OneDrive - University of Cambridge/CSC/",
"C:/Users/ta507/OneDrive - University of Cambridge/CSC/",
"rcs-gedo2-team_coldstorage/LAB_Share/RNAseq/barley/genome_GP/",
paste0("Hordeum_vulgare.refseq[", .each_chr, "].fasta")
) %>%
Rsamtools::FaFile() %>%
open()
# Set progress bar
.pb <- progress::progress_bar$new(
total = .data %>%
dplyr::select(all_of(.locus_var)) %>%
unique() %>%
nrow()
)
# Initiate progress bar
# Get promoters for each loci
.promoters <- .data %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
#dplyr::group_by("locus_tag") %>% # 'locus_tag' must be assign on the fly
dplyr::group_by(across(all_of(.locus_var))) %>%
dplyr::group_map(.f = function(.each_data, .each_keys) {
# 'locus_tag' and 'promoter_size' must be assign on the fly
# .each_loci       <- .each_keys %>% dplyr::pull(locus_tag) %>% unique()
# .each_upstream   <- .each_data %>% dplyr::pull(promoter_size) %>% unique()
.each_loci       <- .each_keys %>% dplyr::pull(.locus_var) %>% unique()
.each_upstream   <- .each_data %>% dplyr::pull(.dist_var) %>% unique()
.each_downstream <- 0 # implement properly lazy ass! Either function argument or data column
.each_promoters <- .txdb %>%
GenomicFeatures::transcripts(filter = list("tx_name" = .each_loci)) %>%
GenomicFeatures::getPromoterSeq(
subject    = .fasta_file,
upstream   = .each_upstream,
downstream = .each_downstream
) %>%
set_names(.each_loci)
.pb$tick()
.each_promoters
})
# Close FASTA file
close(.fasta_file)
# End progress bar
rm(.pb)
.promoters %>%
do.call(what = c, arg = .)
}) %>%
do.call(what = c, arg = .)
.sequences
}
my_promoters <- minyao_promoters2 %>%
get_promoters(.txdb = txdb)
get_promoters <- function(.distances, .txdb = NULL, .locus_var = "locus_tag", .chr_var = "chr", .dist_var = "promoter_size") {
# This is not working as expected, need to check whether the txdb exists/was assigned; tryCatch() maybe
# if(!quote(.txdb) %>% as.character() %>% exists()) stop(".txdb is not set")
if(is.null(.txdb)) stop(".txdb is NULL")
.sequences <- .distances %>%
# dplyr::slice(1:100) %>% # Taking too long to do the whole table
dplyr::group_by(across(all_of(.chr_var))) %>%
dplyr::group_map(.f = function(
.data, .keys,
#.min_size = 100, .max_size = 2000, # not being used yet, might never be
.debug = TRUE
) {
.each_chr <- .keys %>% dplyr::pull(.chr_var) %>% unique()
# Talk to me!
print(.each_chr)
# Trim promoter sizes
#... to-do
# Open FASTA file for each chromossome prior to extracting promoters in each
.fasta_file <- paste0(
# "E:/OneDrive - University of Cambridge/CSC/",
"C:/Users/ta507/OneDrive - University of Cambridge/CSC/",
"rcs-gedo2-team_coldstorage/LAB_Share/RNAseq/barley/genome_GP/",
paste0("Hordeum_vulgare.refseq[", .each_chr, "].fasta")
) %>%
Rsamtools::FaFile() %>%
open()
# Set progress bar
.pb <- progress::progress_bar$new(
total = .data %>%
dplyr::select(all_of(.locus_var)) %>%
unique() %>%
nrow()
)
# Initiate progress bar
# Get promoters for each loci
.promoters <- .data %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
#dplyr::group_by("locus_tag") %>% # 'locus_tag' must be assign on the fly
dplyr::group_by(across(all_of(.locus_var))) %>%
dplyr::group_map(.f = function(.each_data, .each_keys) {
# 'locus_tag' and 'promoter_size' must be assign on the fly
# .each_loci       <- .each_keys %>% dplyr::pull(locus_tag) %>% unique()
# .each_upstream   <- .each_data %>% dplyr::pull(promoter_size) %>% unique()
.each_loci       <- .each_keys %>% dplyr::pull(.locus_var) %>% unique()
.each_upstream   <- .each_data %>% dplyr::pull(.dist_var) %>% unique()
.each_downstream <- 0 # implement properly lazy ass! Either function argument or data column
.each_promoters <- .txdb %>%
GenomicFeatures::transcripts(filter = list("tx_name" = .each_loci)) %>%
GenomicFeatures::getPromoterSeq(
subject    = .fasta_file,
upstream   = .each_upstream,
downstream = .each_downstream
) %>%
set_names(.each_loci)
.pb$tick()
.each_promoters
})
# Close FASTA file
close(.fasta_file)
# End progress bar
rm(.pb)
.promoters %>%
do.call(what = c, arg = .)
}) %>%
do.call(what = c, arg = .)
.sequences
}
my_promoters <- minyao_promoters2 %>%
get_promoters(.txdb = txdb)
get_promoters <- function(.distances, .txdb = NULL, .locus_var = "locus_tag", .chr_var = "chr", .dist_var = "promoter_size") {
# This is not working as expected, need to check whether the txdb exists/was assigned; tryCatch() maybe
# if(!quote(.txdb) %>% as.character() %>% exists()) stop(".txdb is not set")
if(is.null(.txdb)) stop(".txdb is NULL")
.sequences <- .distances %>%
# dplyr::slice(1:100) %>% # Taking too long to do the whole table
dplyr::group_by(across(all_of(.chr_var))) %>%
dplyr::group_map(.f = function(
.data, .keys,
#.min_size = 100, .max_size = 2000, # not being used yet, might never be
.debug = TRUE
) {
.each_chr <- .keys %>% dplyr::pull(.chr_var) %>% unique()
# Talk to me!
print(.each_chr)
# Trim promoter sizes
#... to-do
# Open FASTA file for each chromossome prior to extracting promoters in each
.fasta_file <- paste0(
# "E:/OneDrive - University of Cambridge/CSC/",
"C:/Users/ta507/OneDrive - University of Cambridge/CSC/",
"rcs-gedo2-team_coldstorage/LAB_Share/RNAseq/barley/genome_GP/",
paste0("Hordeum_vulgare.refseq[", .each_chr, "].fasta")
) %>%
Rsamtools::FaFile() %>%
open()
# Set progress bar
.pb <- progress::progress_bar$new(
total = .data %>%
dplyr::select(all_of(.locus_var)) %>%
unique() %>%
nrow()
)
# Initiate progress bar
# Get promoters for each loci
.promoters <- .data %>%
(function(.data) {
.pb$tick(0)
.data
}) %>%
#dplyr::group_by("locus_tag") %>% # 'locus_tag' must be assign on the fly
dplyr::group_by(across(all_of(.locus_var))) %>%
dplyr::group_map(.f = function(.each_data, .each_keys) {
# 'locus_tag' and 'promoter_size' must be assign on the fly
# .each_loci       <- .each_keys %>% dplyr::pull(locus_tag) %>% unique()
# .each_upstream   <- .each_data %>% dplyr::pull(promoter_size) %>% unique()
.each_loci       <- .each_keys %>% dplyr::pull(.locus_var) %>% unique()
.each_upstream   <- .each_data %>% dplyr::pull(.dist_var) %>% unique()
.each_downstream <- 0 # implement properly lazy ass! Either function argument or data column
.each_promoters <- .txdb %>%
GenomicFeatures::transcripts(filter = list("tx_name" = .each_loci)) %>%
GenomicFeatures::getPromoterSeq(
subject    = .fasta_file,
upstream   = .each_upstream,
downstream = .each_downstream
) %>%
set_names(.each_loci)
.pb$tick()
.each_promoters
})
# Close FASTA file
close(.fasta_file)
# End progress bar
# rm(.pb)
.promoters %>%
do.call(what = c, arg = .)
}) %>%
do.call(what = c, arg = .)
.sequences
}
my_promoters <- minyao_promoters2 %>%
get_promoters(.txdb = txdb)
my_promoters %>% write_fasta("data/promoters_Min-Yao.fasta")
write_fasta <- function(.sequences, .output_file) {
Biostrings::writeXStringSet(.sequences, filepath = .output_file)
}
write_rda <- function(.sequences, .output_file) {
save(.sequences, file = .output_file)
}
# Not being used currently
write_sequences <- function(.sequences, .output_file) {
switch (
tools::file_ext(.output_file),
fasta = write_fasta(.sequences, .output_file),
fa    = write_fasta(.sequences, .output_file),
rda   = write_rda(.sequences, .output_file)
)
}
my_promoters %>% write_fasta("data/promoters_Min-Yao.fasta")
my_promoters %>% write_rda("data/promoters_Min-Yao.rda")
save.image("C:/Users/ta507/OneDrive - University of Cambridge/CSC/Programs/R/CSCpromoters/CSCpromoters.RData")
